#!/bin/bash

# movie-cli - A basic movie streaming CLI tool using vidsrc.net
# Dependencies: curl, jq, mpv (or vlc)

VERSION="1.0.0"
SCRIPT_NAME="movie-cli"

TMDB_BASE_URL="https://api.themoviedb.org/3"
VIDSRC_BASE_URL="https://vidsrc.net/embed"
USER_AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"


detect_player() {
    if command -v brave-browser >/dev/null 2>&1; then
        echo "brave-browser"
    elif command -v mpv >/dev/null 2>&1; then
        echo "mpv"
    elif command -v vlc >/dev/null 2>&1; then
        echo "vlc"
    elif command -v firefox >/dev/null 2>&1; then
        echo "firefox"
    else
        echo "xdg-open"
    fi
}

PLAYER="${MOVIE_CLI_PLAYER:-$(detect_player)}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m' # No Color

# Animation and intro functions


# Helper functions
log_info() {
    printf "${CYAN}ℹ️  [INFO]${NC} %s\n" "$1"
}

log_error() {
    printf "${RED}❌ [ERROR]${NC} %s\n" "$1" >&2
}

log_success() {
    printf "${GREEN}✅ [SUCCESS]${NC} %s\n" "$1"
}

log_warning() {
    printf "${YELLOW}⚠️  [WARNING]${NC} %s\n" "$1"
}

log_step() {
    printf "${BLUE}🔍 [STEP]${NC} %s\n" "$1"
}

log_search() {
    printf "${PURPLE}🔎 [SEARCH]${NC} %s\n" "$1"
}

log_player() {
    printf "${GREEN}🎬 [PLAYER]${NC} %s\n" "$1"
}

log_api() {
    printf "${CYAN}🌐 [API]${NC} %s\n" "$1"
}

log_movie() {
    printf "${YELLOW}🎭 [MOVIE]${NC} %s\n" "$1"
}

# Enhanced logging with better animations
celebrate_success() {
    local message="$1"
    printf "\n${GREEN}"
    printf "    ╔═══════════════════════════════════════════════════════════════╗\n"
    printf "    ║  🎉 %-55s 🎉  ║\n" "$message"
    printf "    ╚═══════════════════════════════════════════════════════════════╝\n"
    printf "${NC}\n"
}



# Check dependencies
check_dependencies() {
    log_step "Checking system dependencies..."
    
    local missing_deps=()
    local found_deps=()
    
    if command -v curl >/dev/null 2>&1; then
        found_deps+=("curl")
    else
        missing_deps+=("curl")
    fi
    
    if command -v jq >/dev/null 2>&1; then
        found_deps+=("jq")
    else
        missing_deps+=("jq")
    fi
    
    if [ ${#found_deps[@]} -gt 0 ]; then
        log_success "Found dependencies: ${found_deps[*]}"
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "Missing dependencies: ${missing_deps[*]}"
        log_info "Please install the missing dependencies and try again."
        log_info "On Ubuntu/Debian: sudo apt install curl jq"
        log_info "On CentOS/RHEL: sudo yum install curl jq"
        log_info "On macOS: brew install curl jq"
        exit 1
    fi
    
    log_success "All dependencies are available!"
}

# Show help
show_help() {
    printf "${CYAN}🎬 ${SCRIPT_NAME} v${VERSION}${NC}\n"
    printf "${GRAY}A beautiful CLI tool for streaming movies using vidsrc.net${NC}\n\n"
    
    printf "${WHITE}Usage:${NC} $SCRIPT_NAME [OPTIONS] [QUERY]\n\n"
    
    printf "${WHITE}OPTIONS:${NC}\n"
    printf "    ${YELLOW}-h, --help${NC}          Show this help message\n"
    printf "    ${YELLOW}-v, --version${NC}       Show version information\n"
    printf "    ${YELLOW}-p, --player PLAYER${NC} Set video player (mpv, vlc, firefox, brave-browser, xdg-open)\n"
    printf "    ${YELLOW}-q, --quality${NC}       Select quality (not implemented in basic version)\n"
    printf "    ${YELLOW}--fast${NC}              Fast mode (skip IMDB ID fetch for faster search)\n"
    printf "    ${YELLOW}--setup${NC}             Setup TMDB API key\n"

    
    printf "${WHITE}EXAMPLES:${NC}\n"
    printf "    ${GREEN}$SCRIPT_NAME \"Inception\"${NC}\n"
    printf "    ${GREEN}$SCRIPT_NAME --player vlc \"The Matrix\"${NC}\n"
    printf "    ${GREEN}$SCRIPT_NAME --fast \"Avengers Endgame\"${NC}\n\n"
    
    printf "${WHITE}ENVIRONMENT VARIABLES:${NC}\n"
    printf "    ${CYAN}MOVIE_CLI_PLAYER${NC}    Default player to use\n"
    printf "    ${CYAN}TMDB_API_TOKEN${NC}     Your TMDB API Read Access Token\n"

    
    printf "${YELLOW}NOTE:${NC} You need a TMDB API key to search for movies.\n"
    printf "Get one from: ${BLUE}https://www.themoviedb.org/settings/api${NC}\n"
}

# Setup TMDB API key
setup_api_key() {
    echo "To use this tool, you need a TMDB API Read Access Token."
    echo ""
    echo "1. Go to https://www.themoviedb.org/"
    echo "2. Create an account if you don't have one"
    echo "3. Go to Settings > API"
    echo "4. Copy the 'API Read Access Token' (the long token starting with 'eyJ')"
    echo "5. Set the environment variable:"
    echo "   export TMDB_API_TOKEN='your_token_here'"
    echo ""
    echo "   Or add it to your ~/.bashrc or ~/.zshrc file for persistence:"
    echo "   echo 'export TMDB_API_TOKEN=\"your_token_here\"' >> ~/.bashrc"
    echo ""
    echo "Note: Use the 'API Read Access Token', not the 'API Key (v3 auth)'"
    echo "The token should look like: eyJhbGciOiJIUzI1fad..."
    echo ""
    echo "After setting the token, restart your terminal or run:"
    echo "source ~/.bashrc"
}

# Check if TMDB API token is set
check_api_key() {
    log_step "Checking TMDB API configuration..."
    
    if [ -z "$TMDB_API_TOKEN" ]; then
        log_error "TMDB API Read Access Token not found!"
        log_info "Please set your TMDB API token using: export TMDB_API_TOKEN='your_token_here'"
        setup_api_key
        exit 1
    fi
    
    # Clean the token from any newlines or extra whitespace
    TMDB_API_TOKEN=$(echo "$TMDB_API_TOKEN" | tr -d '\n\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    
    log_success "TMDB API token is configured!"
}

# Search for movies using TMDB API
search_movies() {
    local query="$1"
    local encoded_query=$(printf '%s' "$query" | sed 's/ /%20/g')
    
    log_search "Searching TMDB database for: '$query'" >&2
    log_api "Making API request to TMDB..." >&2
    
    # Show enhanced loading with progress
    printf "${CYAN}⏳ Searching movie database" >&2
    for i in {1..5}; do
        sleep 0.2
        printf "." >&2
    done
    printf "${NC}" >&2
    
    local response=$(curl -s --max-time 10 --connect-timeout 5 \
        -H "Authorization: Bearer $TMDB_API_TOKEN" \
        -H "accept: application/json" \
        "$TMDB_BASE_URL/search/movie?query=$encoded_query&include_adult=false&language=en-US&page=1")
    
    local curl_exit_code=$?
    
    # Clear the progress indicator and show success
    printf "\r${GREEN}✅ Search completed successfully!${NC}             \n" >&2
    
    if [ $curl_exit_code -ne 0 ]; then
        log_error "Failed to search movies. Check your internet connection." >&2
        log_info "Please ensure you have a stable internet connection and try again." >&2
        return 1
    fi
    
    # Check if response contains error
    local error_message=$(echo "$response" | jq -r '.status_message // empty' 2>/dev/null)
    if [ -n "$error_message" ]; then
        log_error "TMDB API Error: $error_message" >&2
        log_info "This might be due to an invalid API token or API rate limiting." >&2
        return 1
    fi
    
    # Get total results count
    local total_results=$(echo "$response" | jq -r '.total_results // 0' 2>/dev/null)
    
    # Check if total_results is a valid number
    if ! [[ "$total_results" =~ ^[0-9]+$ ]]; then
        log_warning "Could not determine number of results, checking if any movies were found..."
        total_results=0
    fi
    
    if [ "$total_results" -eq 0 ]; then
        log_warning "No movies found for: '$query'" >&2
        log_info "Try different keywords or check the spelling." >&2

        local temp_file=$(mktemp)
        echo "$temp_file"
        return 1
    fi
    
    log_success "Found $total_results movie(s) matching your search!" >&2
    

    local temp_file=$(mktemp)
    echo "$response" | jq -r '.results[0:10][]? | "\(.id)|\(.title)|\(.release_date // "Unknown")|\(.overview // "No description available" | .[0:100])"' 2>/dev/null > "$temp_file"
    
    if [ ! -s "$temp_file" ]; then
        log_warning "Failed to parse movie results." >&2
        log_info "API Response preview:" >&2
        echo "$response" | head -c 500 >&2
        rm -f "$temp_file"
        return 1
    fi
    # Return the temp file path for processing
    echo "$temp_file"
}

# Display movie selection menu
select_movie() {
    local temp_file="$1"
    local count=1
    
    log_movie "Displaying search results..." >&2
    printf "\n${PURPLE}🎬 Movie Search Results${NC}\n" >&2
    printf "${BLUE}╔══════════════════════════════════════════════════════════════════════════════╗${NC}\n" >&2
    
    # Create a temporary file for the display data
    local display_file=$(mktemp)
    
    while IFS='|' read -r id title release_date overview; do
        # Ensure we have valid data
        if [ -n "$id" ] && [ -n "$title" ]; then
            printf "${BLUE}║${NC} ${YELLOW}%2d.${NC} ${WHITE}%-50s${NC} ${CYAN}(%s)${NC} ${BLUE}║${NC}\n" "$count" "$title" "$release_date" >&2
            printf "${BLUE}║${NC}     ${GRAY}%-70s${NC} ${BLUE}║${NC}\n" "${overview:0:70}" >&2
            printf "${BLUE}╠──────────────────────────────────────────────────────────────────────────────╣${NC}\n" >&2
            # Store the data for later selection
            echo "$id|$title|$release_date|$overview" >> "$display_file"
            count=$((count + 1))
        fi
    done < "$temp_file"
    
    if [ "$count" -eq 1 ]; then
        log_error "No valid movies found to display."
        rm -f "$temp_file" "$display_file"
        return 1
    fi
    
    printf "${BLUE}╚══════════════════════════════════════════════════════════════════════════════╝${NC}\n" >&2
    printf "\n${CYAN}🎯 Enter your choice (1-%d) or 'q' to quit: ${NC}" $((count - 1)) >&2
    read -r choice </dev/tty
    
    if [ "$choice" = "q" ] || [ "$choice" = "Q" ]; then
        log_info "Goodbye! 👋" >&2
        rm -f "$temp_file" "$display_file"
        return 2  # Return special code for user quit
    fi
    
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt $((count - 1)) ]; then
        log_error "Invalid selection! Please enter a number between 1 and $((count - 1))." >&2
        rm -f "$temp_file" "$display_file"
        return 1
    fi
    
    # Get the selected movie ID and title
    local selected_line=$(sed -n "${choice}p" "$display_file")
    local movie_id=$(echo "$selected_line" | cut -d'|' -f1)
    local movie_title=$(echo "$selected_line" | cut -d'|' -f2)
    
    # Clean up temporary files
    rm -f "$temp_file" "$display_file"
    
    log_success "Selected: '$movie_title'" >&2
    echo "$movie_id|$movie_title"
}

# Get IMDB ID from TMDB ID
get_imdb_id() {
    local tmdb_id="$1"
    
    log_api "Fetching IMDB ID for movie (TMDB ID: $tmdb_id)..." >&2
    
    local response=$(curl -s --max-time 10 --connect-timeout 5 \
        -H "Authorization: Bearer $TMDB_API_TOKEN" \
        -H "accept: application/json" \
        "$TMDB_BASE_URL/movie/$tmdb_id/external_ids")
    
    if [ $? -ne 0 ]; then
        log_error "Failed to get IMDB ID. Check your internet connection." >&2
        log_warning "Falling back to TMDB ID for streaming..." >&2
        echo "$tmdb_id"
        return 1
    fi
    
    # Check if response contains error
    local error_message=$(echo "$response" | jq -r '.status_message // empty' 2>/dev/null)
    if [ -n "$error_message" ]; then
        log_error "TMDB API Error: $error_message" >&2
        log_warning "Falling back to TMDB ID for streaming..." >&2
        echo "$tmdb_id"
        return 1
    fi
    
    local imdb_id=$(echo "$response" | jq -r '.imdb_id // empty' 2>/dev/null)
    
    if [ -z "$imdb_id" ] || [ "$imdb_id" = "null" ]; then
        log_warning "Could not find IMDB ID, using TMDB ID instead" >&2
        echo "$tmdb_id"
    else
        log_success "Found IMDB ID: $imdb_id" >&2
        echo "$imdb_id"
    fi
}

# Play movie using vidsrc.net
play_movie() {
    local movie_id="$1"
    local movie_title="$2"
    local use_imdb="$3"
    
    local stream_url
    if [ "$use_imdb" = "true" ]; then
        stream_url="$VIDSRC_BASE_URL/$movie_id"
    else
        stream_url="$VIDSRC_BASE_URL/movie/$movie_id"
    fi
    
    log_movie "Preparing to play: '$movie_title'" >&2
    log_api "Stream URL: $stream_url" >&2
    log_player "Using player: $PLAYER" >&2
    
    case "$PLAYER" in
        mpv)
            log_success "Starting playback with mpv... 🎬" >&2
            mpv --user-agent="$USER_AGENT" --referrer="https://vidsrc.me/" "$stream_url"
            ;;
        vlc)
            log_success "Starting playback with VLC... 🎬" >&2
            vlc --http-user-agent="$USER_AGENT" "$stream_url" >/dev/null 2>&1 &
            ;;
        firefox|chrome|chromium|brave-browser)
            log_success "Opening in browser... 🌐" >&2
            "$PLAYER" "$stream_url" >/dev/null 2>&1 &
            ;;
        *)
            log_success "Opening with default application... 🎬" >&2
            xdg-open "$stream_url" >/dev/null 2>&1 &
            ;;
    esac
}

# Main function
main() {
    local query=""
    local player_override=""
    local skip_intro=false
    
    # Parse command line arguments
    while [ $# -gt 0 ]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                echo "$SCRIPT_NAME v$VERSION"
                exit 0
                ;;
            -p|--player)
                if [ -n "$2" ]; then
                    player_override="$2"
                    shift
                else
                    log_error "Player option requires an argument"
                    exit 1
                fi
                ;;
            --fast)
                FAST_MODE="true"
                ;;
            --setup)
                setup_api_key
                exit 0
                ;;
            --no-intro)
                skip_intro=true
                ;;
            -*)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                query="$query $1"
                ;;
        esac
        shift
    done
    
    
    # Override player if specified
    if [ -n "$player_override" ]; then
        PLAYER="$player_override"
        log_player "Player overridden to: ${WHITE}$PLAYER${NC}"
    fi
    
    log_step "Initializing movie-cli..."
    
    # Check dependencies
    check_dependencies
    
    # Check API key
    check_api_key
    
    # Get search query if not provided
    if [ -z "$query" ]; then
        printf "${CYAN}🎬 Enter movie name to search: ${NC}" >&2
        read -r query </dev/tty
    fi
    
    query=$(echo "$query" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    
    if [ -z "$query" ]; then
        log_error "No search query provided!"
        exit 1
    fi
    
    log_step "Starting movie search process..."
    
    # Search for movies
    local search_temp_file=$(search_movies "$query")
    local search_exit_code=$?
    
    if [ $search_exit_code -ne 0 ]; then
        log_error "Search failed. Please try again with different keywords."
        exit 1
    fi
    
    if [ ! -f "$search_temp_file" ] || [ ! -s "$search_temp_file" ]; then
        log_error "No search results found. Please try again with different keywords."
        exit 1
    fi
    
    # Let user select movie
    local selection=$(select_movie "$search_temp_file")
    local selection_exit_code=$?
    
    if [ $selection_exit_code -eq 2 ]; then
        # User chose to quit
        exit 0
    elif [ $selection_exit_code -ne 0 ]; then
        log_error "Movie selection failed. Please try again."
        exit 1
    fi
    
    local movie_id=$(echo "$selection" | cut -d'|' -f1)
    local movie_title=$(echo "$selection" | cut -d'|' -f2)
    
    # Validate that we got proper values
    if [ -z "$movie_id" ] || [ -z "$movie_title" ]; then
        log_error "Failed to extract movie information. Please try again."
        exit 1
    fi
    
    log_step "Preparing movie for playback..."
    
    # Get IMDB ID for better compatibility (with timeout)
    if [ "$FAST_MODE" = "true" ]; then
        log_api "Fast mode: Skipping IMDB ID fetch for faster playback"
        local final_id="$movie_id"
        local use_imdb="false"
    else
        log_api "Fetching movie details..."
        local final_id=$(get_imdb_id "$movie_id")
        local use_imdb="false"
        
        if [[ "$final_id" == tt* ]]; then
            use_imdb="true"
            log_api "Using IMDB ID: ${WHITE}$final_id${NC}"
        else
            log_api "Using TMDB ID: ${WHITE}$final_id${NC}"
        fi
    fi
    
    # Play the movie
    play_movie "$final_id" "$movie_title" "$use_imdb"
    
    celebrate_success "Enjoy your movie! 🍿"
}

main "$@"
